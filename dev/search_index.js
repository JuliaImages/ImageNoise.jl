var documenterSearchIndex = {"docs":
[{"location":"democards/examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"This page collects examples on how to apply and reduce noise for you to start with.","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"democards/examples/#Apply-noise-1","page":"Examples","title":"Apply noise","text":"","category":"section"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"<div class=\"card-section\">","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"<div class=\"card\">\n<div class=\"card-img\">\n<p class=\"card-description\">This demo shows how to add white additive gaussian noise to an image</p>","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"(Image: svd)","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>\n<div class=\"card-text\">","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"White Additive Gaussian Noise","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"democards/examples/#Reduce-noise-1","page":"Examples","title":"Reduce noise","text":"","category":"section"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"<div class=\"card-section\">","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"<div class=\"card\">\n<div class=\"card-img\">\n<p class=\"card-description\">This demo shows how to use Non-local Mean filter to reduce gaussian noise</p>","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"(Image: svd)","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>\n<div class=\"card-text\">","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"Non-local Mean Filter","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"democards/examples/#","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#white-additive-gaussian-noise-1-1","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"","category":"section"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"(Image: ) (Image: )","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"Mathematically, adding a white additive gaussian noise to an image is as simple as Y = X + N where N sim mathcalN(musigma^2)","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"using ImageNoise, TestImages, ImageShow, ImageCore, ImageQualityIndexes","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"Let's add noise to gray image first","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"gray_img = testimage(\"cameraman\") .|> float32\nnoise = AdditiveWhiteGaussianNoise(0.1)\ngray_noisy_img = apply_noise(gray_img, noise)","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"For RGB image, noise aren't added to it channel by channel, instead, we generate a 3times Mtimes N gaussian noise and directly added to its channelview result. Adding noise channel by channel would indeed get a different distribution (but still a gaussian noise).","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"rgb_img = testimage(\"mandrill\") .|> float32\nrgb_noisy_img = apply_noise(rgb_img, noise)","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"Colorful images of other formats are converted to RGB first since RGB color space is considered \"linear\".","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"hsv_img = HSV.(rgb_img)\nhsv_noisy_img = apply_noise(hsv_img, noise)\nincorrect_hsv_noisy_img = colorview(HSV, apply_noise(channelview(hsv_img), noise))\n\n# If we compare their psnr, the second one is significantly lower than the first one\n[psnr(rgb_noisy_img, RGB.(hsv_noisy_img))\npsnr(rgb_noisy_img, RGB.(incorrect_hsv_noisy_img))]","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"","category":"page"},{"location":"democards/examples/apply_noise/AWGN/#","page":"White Additive Gaussian Noise","title":"White Additive Gaussian Noise","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"democards/examples/reduce_noise/nonlocal/#non-local-mean-filter-1-1","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"","category":"section"},{"location":"democards/examples/reduce_noise/nonlocal/#","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"(Image: ) (Image: )","category":"page"},{"location":"democards/examples/reduce_noise/nonlocal/#","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"using ImageNoise, TestImages, ImageShow, ImageCore, ImageQualityIndexes\n\n\ngray_img = testimage(\"cameraman\") .|> float32\nn = AdditiveWhiteGaussianNoise(0.1)\nnoisy_img = apply_noise(gray_img, n)\n\nf_nlmean = NonlocalMean(0.1)\ndenoised_img = reduce_noise(noisy_img, f_nlmean)\n\n[gray_img noisy_img denoised_img]","category":"page"},{"location":"democards/examples/reduce_noise/nonlocal/#","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"psnr(gray_img, denoised_img)","category":"page"},{"location":"democards/examples/reduce_noise/nonlocal/#","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"","category":"page"},{"location":"democards/examples/reduce_noise/nonlocal/#","page":"Non-local Mean Filter","title":"Non-local Mean Filter","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"reference/#package_references-1","page":"References","title":"Package References","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"Pages = [\"reference.md\"]\nDepth = 2","category":"page"},{"location":"reference/#ApplyNoise-1","page":"References","title":"ApplyNoise","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"ApplyNoise module provides several noise prototypes.","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Modules = [ImageNoise.ApplyNoise]\nOrder   = [:type, :function, :macro]","category":"page"},{"location":"reference/#ImageNoise.ApplyNoise.AdditiveWhiteGaussianNoise","page":"References","title":"ImageNoise.ApplyNoise.AdditiveWhiteGaussianNoise","text":"AdditiveWhiteGaussianNoise <: AbstractImageNoise\nAdditiveWhiteGaussianNoise([μ=0.0], σ)\n\napply white gaussian noise to image\n\nFor gray images, it uses the following formula:\n\nout = clamp01.(in .+ σ .* randn(size(in)) .+ μ)\n\nRGB images are treated as 3D-gray images, generic Color3 images will be converted to RGB images first.\n\nExamples\n\nimg = testimage(\"lena_gray_256\")\nn = AdditiveWhiteGaussianNoise(0.1)\nout = apply_noise(img, n)\n\nSee also: apply_noise, apply_noise!\n\nReferences\n\n[1] Wikipedia contributors. (2019, March 8). Additive white Gaussian noise. In Wikipedia, The Free Encyclopedia. Retrieved 14:32, June 9, 2019, from https://en.wikipedia.org/w/index.php?title=AdditivewhiteGaussian_noise&oldid=886818982\n\n\n\n\n\n","category":"type"},{"location":"reference/#ReduceNoise-1","page":"References","title":"ReduceNoise","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"ReduceNoise module provides several noise reduction algorithms.","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Modules = [ImageNoise.ReduceNoise]\nOrder   = [:type, :function, :macro]","category":"page"},{"location":"reference/#ImageNoise.ReduceNoise.NonlocalMean","page":"References","title":"ImageNoise.ReduceNoise.NonlocalMean","text":"NonlocalMean(λ [, r_p=2, r_s=2r_p+1])\nNonlocalMean(λ, img)\n\nNon-local mean denoising filter for additive white Gaussian noise using the following formula:\n\n    yp = sum_q in mathscrN(r_s p) wp qxq\n\nwhere w[p, q] represents the similarity of two patches centered in p and q, calculated by\n\n    wp q = frac1Zpe^-fraclVertmathscrN(r_w p) - mathscrN(r_w q) rVert^2_2 aλ^2\n\nZ[p] is the normalizing constant so that ∑w over q equals to 1.\n\nArguments\n\nλ::Float64 is the degree of filtering, larger λ produces a smoother result.\nr_p::Int64 is the radius of image patch size. By default it's 2.\nr_s::Int64 is the radius of search window, large r_s would slow down\n\nthe filtering significantly. By default it's 2r_p + 1.\n\nIf you pass img to NonlocalMean, it will be used to estimate r_p and r_s.\n\nExamples\n\nimg = testimage(\"lena_color_256\")\n\nn = AdditiveWhiteGaussianNoise(0.1)\nnoisy_img = apply_noise(img, n)\n\n# use default filter arguments\nf_denoise = NonlocalMean(0.1)\ndenoised_img = reduce_noise(noisy_img, f)\n\n# estimate filter arguments with noisy_img\nf_denoise = NonlocalMean(0.1, noisy_img)\ndenoised_img = reduce_noise(noisy_img, f)\n\nSee also: reduce_noise, reduce_noise!\n\nReferences\n\n[1] Buades, A., Coll, B., & Morel, J. M. (2005, June). A non-local algorithm for image denoising. In 2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR'05) (Vol. 2, pp. 60-65). IEEE.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ImageNoise.ReduceNoise._colon-Tuple{Any,Any}","page":"References","title":"ImageNoise.ReduceNoise._colon","text":"_colon(I:J)\n\n_colon(I, J) works equivelently to I:J, it's used to backward support julia v\"1.0\".\n\n\n\n\n\n","category":"method"},{"location":"reference/#ImageNoise.ReduceNoise.make_kernel-Tuple{Any}","page":"References","title":"ImageNoise.ReduceNoise.make_kernel","text":"gaussian-like kernel \n\n\n\n\n\n","category":"method"},{"location":"reference/#NoiseAPI-1","page":"References","title":"NoiseAPI","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"NoiseAPI is an experimental module on unifying the API of different denoise algorithms. This is used by algorithm develpers, users are not expected to use this module directly.","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Modules = [ImageNoise.NoiseAPI]\nOrder   = [:type, :function, :macro]","category":"page"},{"location":"reference/#ImageNoise.NoiseAPI.AbstractImageAlgorithm","page":"References","title":"ImageNoise.NoiseAPI.AbstractImageAlgorithm","text":"AbstractImageAlgorithm\n\nThe root of image algorithms type system\n\n\n\n\n\n","category":"type"},{"location":"reference/#ImageNoise.NoiseAPI.AbstractImageFilter","page":"References","title":"ImageNoise.NoiseAPI.AbstractImageFilter","text":"AbstractImageFilter <: AbstractImageAlgorithm\n\nFilters are image algorithms whose input and output are both images\n\n\n\n\n\n","category":"type"},{"location":"reference/#ImageNoise.NoiseAPI.apply_noise","page":"References","title":"ImageNoise.NoiseAPI.apply_noise","text":"apply_noise([::Type,] img, n::AbstractImageNoise, args...; rng=GLOBAL_RNG, kwargs...)\n\nAdd/Apply noise n to image img.\n\nExamples\n\nn = AdditiveWhiteGaussianNoise(0.1)\nimg = testimage(\"lena_gray_256\")\napply_noise(img, n)\n\n# sometimes we need to pass `rng` keyword argument to\n# generate reproducible noise\napply_noise(img, n; rng = MersenneTwister(0))\n\nSee also: apply_noise!\n\n\n\n\n\n","category":"function"},{"location":"reference/#ImageNoise.NoiseAPI.apply_noise!","page":"References","title":"ImageNoise.NoiseAPI.apply_noise!","text":"apply_noise!([out,] img, n::AbstractImageNoise, args...; rng=GLOBAL_RNG, kwargs...)\n\nAdd/Apply noise n to image img.\n\nIf out is specified, it will be changed in place. Otherwise img will be changed in place.\n\nExamples\n\nn = AdditiveWhiteGaussianNoise(0.1)\nimg = testimage(\"lena_gray_256\")\napply_noise!(img, n)\n\n# sometimes we need to pass `rng` keyword argument to\n# generate reproducible noise\napply_noise!(img, n; rng = MersenneTwister(0))\n\nSee also: apply_noise\n\n\n\n\n\n","category":"function"},{"location":"reference/#ImageNoise.NoiseAPI.reduce_noise","page":"References","title":"ImageNoise.NoiseAPI.reduce_noise","text":"reduce_noise([::Type,] img, f::AbstractImageDenoiseAlgorithm, args...)\n\nRemove noise of image img using algorithm f.\n\nSee also: reduce_noise!\n\n\n\n\n\n","category":"function"},{"location":"reference/#ImageNoise.NoiseAPI.reduce_noise!","page":"References","title":"ImageNoise.NoiseAPI.reduce_noise!","text":"reduce_noise!([out,] img, f::AbstractImageDenoiseAlgorithm, args...)\n\nRemove noise of image img using algorithm f.\n\nIf out is specified, it will be changed in place. Otherwise img will be changed in place.\n\nSee also: reduce_noise\n\n\n\n\n\n","category":"function"},{"location":"reference/#ImageNoise.NoiseAPI.@filter_api","page":"References","title":"ImageNoise.NoiseAPI.@filter_api","text":"@filter_api api_name [filter_type=AbstractImageFilter]\n\nThis macro it generate two methods:\n\napi_name([::Type,] img, f::filter_type, args...; kwargs...)\napi_name!([out,] img, f::filter_type, args...; kwargs...)\n\nFor in-place method api_name!, out will be changed after calling the method. When out is not explicitly passed, img will be changed after calling the method.\n\ninfo: Info\nAny api implementation needs to support a f(out, in, args...) method.\nThis macro is designed to be used in ImagesAPIs, and not downstream packages\n\nExample:\n\n1. register the api in ImagesAPI.jl\n\nabstract type AbstractImageNoise <: AbstractImageFilter end\n@filter_api apply_noise AbstractImageNoise\n\n2. implement the api in ImageNoise.jl\n\nimport Main.ImagesAPI: AbstractImageNoise, AbstractImageFilter, apply_noise, apply_noise!\n\nexport\n    apply_noise, apply_noise!,\n    AbstractImageNoise,\n    AdditiveWhiteGaussianNoise\n\nstruct AdditiveWhiteGaussianNoise{T<:AbstractFloat} <: AbstractImageNoise\n    mean::T\n    std::T\nend\n\nfunction (noise::AdditiveWhiteGaussianNoise)(out, in::AbstractArray)\n    @. out = in + noise.std * randn(eltype(out), size(in)) + noise.mean\nend\n\n3. user call the API in a consistent way\n\nusing ImageNoise\nnoise = AdditiveWhiteGaussianNoise(0.0, 0.1)\n\n# simple usage\napply_noise(ones(3,3), noise)\n\n# inplace changing\nimg = ones(3,3)\napply_noise!(img, noise)\n\n# preallocation output\nimg = ones(3,3)\nout = zeros(3, 3)\napply_noise!(out, img, noise)\n\n\n\n\n\n","category":"macro"},{"location":"#ImageNoise-1","page":"Home","title":"ImageNoise","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a package for work related to image noise","category":"page"},{"location":"#","page":"Home","title":"Home","text":"and it's at its early stage","category":"page"}]
}
